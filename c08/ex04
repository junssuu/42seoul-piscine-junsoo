ft_stock_str.h

#ifndef FT_STOCK_STR_H
#define FT_STOCK_STR_H

typedef structs_stock_str
{
  int   size;
  char  *str;
  char  *copy;
} t_stock_str;

#endif

------------------------------
ft_strs_to_tab.c

#include "ft_stock_str.h"
#include <stdlib.h>

int str_size(char *str)
{
  int i;

  i = 0;
  while (str[i] != '\0')
  i++;
  return (i);
}

void  str_cpy(char *dest, char *src)
{
  int i;
  while (*src)
  *(dest)++ = *(src)++;
  *dest = 0;
}

struct s_stock_str* ft_strs_to_tab(int ac, char **av)
{
  t_stock_str *res;
  int i;

  i = 0;
  res = (t_stock_str *)malloc(sizeof(t_stock_str) * (ac + 1));
  if (!res)
    return (NULL);
  while (i < ac)
  {
    res[i].size = str_size(av[i]);
    res[i].str = av[i];
    res[i].copy = (char *)malloc(res[i].size + 1);
    str_cpy(res[i].str, av[i]);
    str_cpy(res[i].copy, av[i]);
    ++i;
  }
  res[i].str = 0;
  return (res);
}

--------------------------------
main.c

#include <stdio.h>
#include "ft_strs_to_tab.c"

struct s_stock_str  *ft_strs_to_tab(int ac, char **av);
void  ft_show_tab(struct s_stock_str *par);

int main(void)
{
  char*strs[100];
  char*str1;
  char*str2;
  char*str3;
  intsize;

  str1 = "hello";
  str2 = " world";
  str3 = "!";
  size = 3;

  strs[0] = str1;
  strs[1] = str2;
  strs[2] = str3;
  ft_show_tab(ft_strs_to_tab(size, strs));
}

--------------------------------

ft_show_tab.c

#include <stdlib.h>
#include <unistd.h>
#include "ft_stock_str.h"

void  ft_size(int size)
{
  char  c;

  if (!size)
    return ;
  c = size % 10 + '0';
  ft_size(size / 10);
  write(1, &c, 1);
}

void  ft_show_tab(struct s_stock_str *par)
{
  int i;

  i = 0;
  while (par[i].str)
  {
    write(1, par[i].str, par[i].size);
    write(1, "\n", 1);
  if (par[i].size)
    ft_size(par[i].size);
  else
    write(1, "0", 1);
  write(1, "\n", 1);
  write(1, par[i].copy, par[i].size);
  write(1, "\n", 1);
  i++;
  }
}
